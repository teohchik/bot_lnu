from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from keyboards.cancel import cancel_button
from keyboards.possible_courses import generate_possible_groups_keyboard
from states.states import Form
from static_data.static import faculties, courses
from utils.api import get_group, get_schedule
from utils.models import Session, User

router = Router()


@router.message(F.text == "–ó–Ω–∞–π—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ üìÖ")
async def start_questionnaire(message: Message, state: FSMContext):
    text = ""
    for faculty in faculties:
        text += f"{faculty}. {faculties[faculty][0]}\n"
    await message.answer(f"–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç! –í–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä—É: \n\n{text}", reply_markup=await cancel_button())

    await state.set_state(Form.faculty)


@router.message(Form.faculty)
async def form_faculty(message: Message, state: FSMContext):
    try:
        user_faculty = faculties[int(message.text)]
    except (KeyError, ValueError):
        await message.answer("–§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ù–∞–ø–∏—à—ñ—Ç—å —â–µ —Ä–∞–∑:", reply_markup=await cancel_button())
        await state.set_state(Form.faculty)
        return
    await state.update_data(faculty=user_faculty[1])
    await state.set_state(Form.course)
    await message.answer("–¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å —è–∫–∏–π –≤–∏ –∫—É—Ä—Å:", reply_markup=await cancel_button())


@router.message(Form.course)
async def form_faculty(message: Message, state: FSMContext):
    try:
        if int(message.text) in courses:
            await state.update_data(course=message.text)
            await state.set_state(Form.group)
            await message.answer("–ü–æ—á–Ω—ñ—Ç—å –≤–≤–æ–¥–∏—Ç–∏ –≤–∞—à—É –≥—Ä—É–ø—É:", reply_markup=await cancel_button())
        else:
            await message.answer("–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 6, –Ω–∞–ø–∏—à—ñ—Ç—å —â–µ —Ä–∞–∑:", reply_markup=await cancel_button())
            await state.set_state(Form.course)
    except ValueError:
        await message.answer("–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —Ü–∏—Ñ—Ä–æ—é, –Ω–∞–ø–∏—à—ñ—Ç—å —â–µ —Ä–∞–∑:", reply_markup=await cancel_button())
        await state.set_state(Form.course)


@router.message(Form.group)
async def form_faculty(message: Message, state: FSMContext):
    user_group = message.text
    data = await state.update_data()
    faculty = data["faculty"]
    course = data["course"]
    possible_groups = await get_group(faculty, course, user_group)
    if possible_groups is None:
        await message.answer("–¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", reply_markup=await cancel_button())
        await state.set_state(Form.group)
    else:
        await message.answer(text="–ú–æ–∂–ª–∏–≤—ñ –≥—Ä—É–ø–∏:",
                             reply_markup=await generate_possible_groups_keyboard(possible_groups))


@router.callback_query()
async def handle_callback_query(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "cancel":
        await callback_query.message.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ!")
        await state.clear()
    else:
        try:
            data = await state.update_data()
            faculty = data["faculty"]
            course = data["course"]
        except:
            return
        await state.clear()
        group = callback_query.data
        await callback_query.message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ {group}")

        session = Session()
        user = session.query(User).filter(User.id == callback_query.from_user.id).first()
        if user is not None:
            user.last_faculty = faculty
            user.last_course = course
            user.last_group = group
            session.add(user)
            session.commit()
        session.close()
        data = await get_schedule(faculty, course, group)
        if data == {}:
            result = "üìå –ü–∞—Ä –Ω–µ–º–∞—î"
            await callback_query.message.answer(result, parse_mode='HTML')
        else:
            days = {
                '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫': '<b>üóì –ü–æ–Ω–µ–¥—ñ–ª–æ–∫</b>\n',
                '–í—ñ–≤—Ç–æ—Ä–æ–∫': '<b>üóì –í—ñ–≤—Ç–æ—Ä–æ–∫</b>\n',
                '–°–µ—Ä–µ–¥–∞': '<b>üóì –°–µ—Ä–µ–¥–∞</b>\n',
                '–ß–µ—Ç–≤–µ—Ä': '<b>üóì –ß–µ—Ç–≤–µ—Ä</b>\n',
                "–ü'—è—Ç–Ω–∏—Ü—è": "<b>üóì –ü'—è—Ç–Ω–∏—Ü—è</b>\n",
                '–°—É–±–æ—Ç–∞': '<b>üóì –°—É–±–æ—Ç–∞</b>\n',
                '–ù–µ–¥—ñ–ª—è': '<b>üóì –ù–µ–¥—ñ–ª—è</b>\n'
            }

            for date, info in data.items():
                result = ""
                result += f"<i>{days[info['day']]}</i> <code>({date})</code>\n"
                for lesson in info['schedule']:
                    result += f"    üîπ –ü–∞—Ä–∞ {lesson['lesson_number']} ({lesson['time'][0]} - {lesson['time'][1]})\n"
                    result += f"    üìñ –ü—Ä–µ–¥–º–µ—Ç: {lesson['subject']}\n"
                    result += f"    üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á: {lesson['lecturer']}\n"
                    result += f"    üè´ –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {lesson['audience'] if lesson['audience'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
                await callback_query.message.answer(result, parse_mode='HTML')
